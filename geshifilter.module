<?php
// $Id$

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

define('GESHIFILTER_DEFAULT_PLAINTEXT', 'GESHIFILTER_DEFAULT_PLAINTEXT');
define('GESHIFILTER_DEFAULT_DONOTHING', 'GESHIFILTER_DEFAULT_DONOTHING');

define('GESHIFILTER_CSS_INLINE', 1);
define('GESHIFILTER_CSS_CLASSES', 2);

define('GESHIFILTER_LANGUAGE_ATTRIBUTES', 'type lang language');
define('GESHIFILTER_LINENUMBER_ATTRIBUTES', 'start');

/**
 * Implementation of hook_help().
 */
function geshifilter_help($section) {
  switch ($section) {
    case 'admin/settings/geshifilter':
    case 'admin/help#geshifilter':
      $output = '<p>'. t('The GeSHi filter module provides a filter for syntax highlighting of inline source code or blocks of source code based on the PHP library !GeSHi.', array('!GeSHi' => l('GeSHi (Generic Syntax Highlighter)', 'http://qbnz.com/highlighter/'))) .'</p>';
      $output .= '<p>'. t('Usage is relatively easy: enable the GeSHi filter in the desired !inputformats, configure the general or per input format settings of the GeSHi filter, check for !filterconflicts and use the input filter as described in the !filtertips. After changing the general settings, it is typically needed to <a href="!clearfiltercache">clear the filter cache</a> before the changes take effect on old content.', array(
        '!inputformats' => l('input formats', 'admin/settings/filters'),
        '!filterconflicts' => l('filter conflicts', 'admin/settings/geshifilter/filterconflicts'),
        '!filtertips' => l('filter tips', 'filter/tips'),
        '!clearfiltercache' => url('geshifilter/clearfiltercache', drupal_get_destination())
      )) .'</p>';
      if ($section == 'admin/help#geshifilter') {
        $output .= '<p>'. t('The GeSHi filter module for Drupal requires the GeSHi library (version 1.0.x) to work. The GeSHi filter is actually just Drupal flavored wrapper around the GeSHi library. Because of <a href="!repositorypolicies">drupal.org repository policies</a> however, the GeSHi library is not included in the GeSHi filter package, so you\'ll have to download and install the GeSHi library separately.', array(
          '!repositorypolicies' => url('http://drupal.org/node/66113'),
        )) .'</p>';
      }
      return $output;
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function geshifilter_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/geshifilter',
      'title' => t('GeSHi Filter'),
      'description' => t('Configure the GeSHi filter.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_general_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/general',
      'title' => t('General settings'),
      'description' => t('General GeSHi filter settings.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/filterconflicts',
      'title' => t('Filter conflicts'),
      'description' => t('Information on possible conflicts with other filters.'),
      'callback' => 'geshifilter_admin_filter_conflicts',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
    // language settings
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages',
      'title' => t('Languages'),
      'description' => t('Enable the desired languages and configure their settings.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geshifilter_admin_per_language_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/enabled',
      'title' => t('Enabled'),
      'description' => t('Show the enabled languages'),
      'weight' => 0,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/all',
      'title' => t('All'),
      'description' => t('Show all the available languages'),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/settings/geshifilter/languages/disabled',
      'title' => t('Disabled'),
      'description' => t('Show the disabled languages'),
      'weight' => 4,
      'type' => MENU_LOCAL_TASK,
    );
    // clear filter cache callback
    $items[] = array(
      'path' => 'geshifilter/clearfiltercache',
      'title' => t('Clear filter cache'),
      'callback' => 'geshifilter_clear_filter_cache',
      'type' => MENU_CALLBACK,
      'access' => user_access('administer site configuration'),
    );
  }
  else {
    // Since the filtered content is cached, it is not possible to know on which
    // pages the css file is actually needed. Thus it is included on all pages.
    drupal_add_css(drupal_get_path('module', 'geshifilter') .'/geshifilter.css');
  }
  return $items;
}

/**
 * Implementation of hook_filter_tips().
 */
function geshifilter_filter_tips($delta, $format, $long = false) {
  // get the available tags
  list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
  // get the available languages
  $languages = _geshifilter_get_enabled_languages();
  $lang_attributes = _geshifilter_whitespace_explode(GESHIFILTER_LANGUAGE_ATTRIBUTES);
  $linenumber_attributes = _geshifilter_whitespace_explode(GESHIFILTER_LINENUMBER_ATTRIBUTES);
  $default_lang = variable_get('geshifilter_default_language', GESHIFILTER_DEFAULT_PLAINTEXT);

  if ($long) {
    // syntax highlighting tags
    $output = '<p>'. t('Syntax highlighting of source code can be done with the following tags:') .'</p>';
    $items = array();
    foreach ($generic_code_tags as $tag) {
      $items[] = '&lt;'. $tag .'&gt;: '. t('generic syntax highlighting tag');
    }
    foreach ($language_tags as $tag) {
      $items[] .= '&lt;'. $tag .'&gt;: '. t('syntax highlighting of %lang', array('%lang' => $tag_to_lang[$tag]));
    }
    $output .= theme('item_list', $items);
    // additional options and tips
    $output .= '<p>'. t('Additional options and tips:') .'</p>';
    $items = array();
    $items[] = t('The language for the generic syntax highlighting tags can be specified with the attribute(s): %attributes. The available languages are: %languages.', array('%attributes' => implode(', ', $lang_attributes), '%languages' => implode(', ', $languages)));
    switch ($default_lang) {
      case GESHIFILTER_DEFAULT_DONOTHING:
        $items[] = t('Default highlighting mode: when no language attribute is specified the code block won\'t be processed by the GeSHi filter.');
        break;
      case GESHIFILTER_DEFAULT_PLAINTEXT:
        $items[] = t('Default highlighting mode: when no language attribute is specified no syntax highlighting is done by default.');
        break;
      default:
        $items[] = t('Default highlighting mode: the default language used for syntax highlighting is %default_lang.', array('%default_lang' => $default_lang));
        break;
    }
    $items[] = t('Line numbering can be enabled by specifying the start line number with the attribute(s): %attributes.', array('%attributes' => implode(', ', $linenumber_attributes)));

    $items[] = t('If the source code between the tags contains a newline (e.g. immediatly after the opening tag), the highlighted source code will be displayed as a code block. Otherwise it will be displayed inline.');
    $output .= theme('item_list', $items);
    // examples
    $output .= '<p>'. t('Examples:') .'</p>';
    $header = array(t('You type'), t('You get'));
    $rows = array();

    $generic_code_tag = array_shift($generic_code_tags);
    $lang_attribute = array_shift($lang_attributes);
    $linenumber_attribute = array_shift($linenumber_attributes);
    $language_tag = array_shift($language_tags);

    if ($generic_code_tag) {
      $rows[] = array(
        '<code>&lt;'. $generic_code_tag .'&gt;foo = bar;&lt;/'. $generic_code_tag .'&gt</code>',
        t('Inline code with the default syntax highlighting mode.'),
      );
      $rows[] = array(
        '<code>&lt;'. $generic_code_tag .'&gt;<br />foo = bar;<br />baz = foz;<br />&lt;/'. $generic_code_tag .'&gt</code>',
        t('Code block with the default syntax highlighting mode.'),
      );
      if ($lang_attribute) {
        $rows[] = array(
          '<code>&lt;'. $generic_code_tag .' '. $lang_attribute .'="php"&gt;<br />foo = bar;<br />baz = foz;<br />&lt;/'. $generic_code_tag .'&gt</code>',
          t('Code block with PHP syntax highlighting.'),
        );
      }
      if ($linenumber_attribute) {
        $rows[] = array(
          '<code>&lt;'. $generic_code_tag .' '. $linenumber_attribute .'="5"&gt;<br />foo = bar;<br />baz = foz;<br />&lt;/'. $generic_code_tag .'&gt</code>',
          t('Code block with the default syntax highlighting mode and line numbers starting from 5.'),
        );
      }
    }
    if ($language_tag) {
      $rows[] = array(
        '<code>&lt;'. $language_tag .'&gt;<br />foo = bar;<br />baz = foz;<br />&lt;/'. $language_tag .'&gt</code>',
        t('Code block with @language syntax highlighting.', array('@language' => $tag_to_lang[$language_tag])),
      );
    }
    $output .= theme('table', $header, $rows);
    return $output;
  }
  else {
    return t('You can enable syntax highlighting of source code with the following tags: %tags', array('%tags' => '<'. implode('>, <', array_merge($generic_code_tags, $language_tags)) .'>'));
  }
}

/**
 * Implementation of hook_filter().
 */
function geshifilter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array('GeSHi filter');

    case 'description':
      return t('Enables syntax highlighting of inline/block source code using the GeSHi engine');

    case 'process':
      return geshifilter_process($format, $text);

    case 'settings':
      return geshifilter_filter_settings($format);

    case 'no cache':
      return false;

    default:
      return $text;
  }
}

function _geshifilter_get_geshi_dir() {
  return variable_get('geshifilter_geshi_dir', drupal_get_path('module', 'geshifilter') .'/geshi');
}

/**
 * Helper function for loading/checking the GeSHi library (if not already)
 * Returns NULL on success or an error message on failure.
 */
function _geshifilter_require_once_geshi_library($use_cache=TRUE, $geshi_dir=NULL, $load_when_found=TRUE) {
  static $geshi_library_errmsg_cache = NULL;
  if ($use_cache && $geshi_library_errmsg_cache !== NULL) {
    // get from cache
    $geshi_library_errmsg = $geshi_library_errmsg_cache;
  }
  else {
    // no cache
    if (!$geshi_dir) {
      $geshi_dir = _geshifilter_get_geshi_dir();
    }
    if (!is_dir($geshi_dir)) {
      $geshi_library_errmsg = t('%dir is not a directory.', array('%dir' => $geshi_dir));
    }
    elseif (is_file($geshi_dir .'/geshi.php')) {
      // GeSHi 1.0.x found
      if ($load_when_found) {
        require_once($geshi_dir .'/geshi.php');
      }
    }
    else {
      $geshi_library_errmsg = t('Could not find a known version of the GeSHi library at %dir.' , array('%dir' => $geshi_dir));
    }
    // store in cache if needed
    if ($use_cache) {
      $geshi_library_errmsg_cache = $geshi_library_errmsg;
    }
  }
  return $geshi_library_errmsg;
}

/**
 * Helper function for some settings form fields usable as general and specific settings
 */
function _geshifilter_tag_and_attribute_settings($format) {
  $form = array();
  $f = ($format === NULL) ? '' : "_$format";
  $form["geshifilter_tags$f"] = array(
    '#type' => 'textfield',
    '#title' => t('Generic syntax highlighting tags'),
    '#default_value' => geshifilter_tags($format),
    '#description' => t('Tags that should activate the GeSHi syntax highlighting. Specify a space-separated list of tagnames.')
  );
  return $form;
}

/**
 * Form (items) for filter settings.
 */
function geshifilter_filter_settings($format) {
  $form = array();
  $form['geshifilter'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi filter'),
    '#collapsible' => TRUE,
  );
  if (geshifilter_use_format_specific_options()) {
    // tags and attributes
    $form['geshifilter']['tags_and_attributes'] = _geshifilter_tag_and_attribute_settings($format);
    // per language tags
    $form['geshifilter']['per_language_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Per language tags'),
      '#collapsible' => TRUE,
      'table' => geshifilter_per_language_settings($format, 'enabled', FALSE, TRUE),
    );
  }
  else {
    $form['geshifilter']['info'] = array(
      '#value' => '<p>'. t('The <a href="!geshi_admin_url">general settings</a> are used for the GeSHi filter . If you want specific settings per input format, you first have to enable this option in the <a href="!geshi_admin_url">general settings</a>.', array('!geshi_admin_url' => url('admin/settings/geshifilter'))) .'</p>'
    );
  }
  return $form;
}

/**
 * function for generating a form table for per language settings
 */
function geshifilter_per_language_settings($format, $view, $add_checkbox, $add_tag_option) {
  $form = array(
    '#theme' => 'geshifilter_per_language_settings',
  );
  // table header
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  if ($add_checkbox) {
    $form['header']['#value'][] = t('Enabled');
  }
  if ($add_tag_option) {
    $form['header']['#value'][] = t('Tags');
  }
  // table body
  $form['languages'] = array();
  $languages = _geshifilter_get_available_languages();
  foreach ($languages as $language) {
    $enabled = variable_get("geshifilter_language_enabled_{$language}", TRUE);
    // skip items to hide
    if (($view == 'enabled' && !$enabled) || ($view == 'disabled' && $enabled)) {
      continue;
    }
    // build language row
    $form['languages'][$language] = array();
    // add enable/disable checkbox
    if ($add_checkbox) {
      $form['languages'][$language]["geshifilter_language_enabled_{$language}"] = array(
        '#type' => 'checkbox',
        '#default_value' => $enabled,
      );
    }
    // add a textfield for tags
    if ($add_tag_option) {
      $f = ($format === NULL) ? '' : "_$format";
      $form['languages'][$language]["geshifilter_language_tags_{$language}{$f}"] = array(
        '#type' => 'textfield',
        '#default_value' => geshifilter_language_tags($language, $format),
      );
    }
  }
  return $form;
}

/**
 * theming function for the per language settings table
 */
function theme_geshifilter_per_language_settings($form) {
  // build table body
  $rows = array();
  foreach (element_children($form['languages']) as $language) {
    $row = array();
    $row[] = "$language";
    foreach (element_children($form['languages'][$language]) as $key) {
      $row[] = drupal_render($form['languages'][$language][$key]);
    }
    $rows[] = $row;
  }
  // build table header
  $header = array(t('Language'));
  foreach ($form['header']['#value'] as $cell) {
    if ($cell == t('Enabled')) {
      // add JavaScript 'select all/select none' stuff
      $header[] = array('data' => $cell) + theme('table_select_header_cell');
    }
    else {
      $header[] = $cell;
    }
  }
  // return themed table
  return theme('table', $header, $rows);
}

/**
 * Menu callback for admin settings
 */
function geshifilter_admin_general_settings() {
  $form = array();
  // GeSHi library settings
  $form['geshi_library'] = array(
    '#type' => 'fieldset',
    '#title' => t('GeSHi library'),
  );
  $form['geshi_library']['geshifilter_geshi_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to GeSHi library'),
    '#default_value' => _geshifilter_get_geshi_dir(),
    '#description' => t('Specify the path to the GeSHi library directory (which contains a file called <em>geshi.php</em>). After changing the path, it is necessary to save and refresh this settings page to see if GeSHi was successfully detected.')
  );
  // try to load GeSHi library and get version if successful
  $geshi_library_errmsg = _geshifilter_require_once_geshi_library();
  if ($geshi_library_errmsg === NULL) {
    // show detected version
    $form['geshi_library']['geshifilter_detected_version'] = array(
      '#value' => t('Detected version: %version', array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
    );
  }
  else {
    // save error condition for pre render phase
    $form['geshifilter_geshi_library_not_found'] = array(
      '#type' => 'value',
      '#value' => $geshi_library_errmsg,
    );
    $form['#pre_render']['geshifilter'] = 'geshifilter_admin_general_settings_pre_render';
  }

  // format specific options
  $form['geshifilter_format_specific_options'] = array(
    '#type' => 'checkbox',
    '#title' => t('Seperate settings per input format'),
    '#default_value' => geshifilter_use_format_specific_options(),
    '#description' => t('Enable seperate configuration of the GeSHi filter for each <a href="!input_formats">input format</a>.', array('!input_formats' => url('admin/settings/filters'))),
  );
  // tags
  if (!geshifilter_use_format_specific_options()) {
    $form['geshifilter_tags_and_attributes'] = _geshifilter_tag_and_attribute_settings($format);
  }

  // default language
  $languages = _geshifilter_get_enabled_languages();
  $form['geshifilter_default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default highlighting mode'),
    '#default_value' => variable_get('geshifilter_default_language', GESHIFILTER_DEFAULT_PLAINTEXT),
    '#options' => array(
      t('No highlighting') => array(
        GESHIFILTER_DEFAULT_DONOTHING => t('Do nothing'),
        GESHIFILTER_DEFAULT_PLAINTEXT => t('As plain text'),
        ),
      t('Languages') => $languages
    ),
    '#description' => t('Select the default highlighting mode to use when no language is defined with a language attribute in the tag.')
  );
  // Styling, layout and CSS
  $form['geshifilter_styling'] = array(
    '#type' => 'fieldset',
    '#title' => t('Styling, layout and CSS'),
  );
  // CSS mode
  $form['geshifilter_styling']['geshifilter_css_mode'] = array(
    '#type' => 'radios',
    '#title' => t('CSS mode for syntax highlighting'),
    '#description' => t('Inline CSS is easier to set up, does not depend on an external style sheets and is consequently more robust to copy/past operations like content aggregation. However, usage of CSS classes is generally considered to be the better way of styling and requires much less HTML code and bandwith. (GeSHi documentation: !link).',
      array('!link' => l('Using CSS Classes', 'http://qbnz.com/highlighter/geshi-doc.html#using-css-classes'))),

    '#default_value' => variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE),
    '#options' => array(
      GESHIFILTER_CSS_INLINE => t('Inline CSS style attributes.'),
      GESHIFILTER_CSS_CLASSES => t('CSS classes and external CSS style sheet.'),
    ),
  );
  // Code container
  $form['geshifilter_styling']['geshifilter_code_container'] = array(
    '#type' => 'radios',
    '#title' => t('Code container'),
    '#description' => t('Define the container element to use for code blocks. (GeSHi documentation: !link).',
      array('!link' => l('The Code Container', 'http://qbnz.com/highlighter/geshi-doc.html#the-code-container'))
    ),
    '#options' => array(
      GESHI_HEADER_PRE => t('Use @cnt container', array('@cnt' => '<pre>')),
      GESHI_HEADER_DIV => t('Use @cnt container', array('@cnt' => '<div>')),
      GESHI_HEADER_NONE => t('Use no container'),
    ),
    '#default_value' => variable_get('geshifilter_code_container', GESHI_HEADER_PRE),
  );
  return system_settings_form($form);
}

/**
 * Pre render function for admin settings
 */
function geshifilter_admin_general_settings_pre_render($form_id, $form) {
 if ($form_id == 'geshifilter_admin_general_settings') {
    if (isset($form['geshifilter_geshi_library_not_found'])) {
      form_set_error('geshifilter_geshi_dir', $form['geshifilter_geshi_library_not_found']['#value']);
    }
  }
}

/**
 * Validation function for admin settings
 */
function geshifilter_admin_general_settings_validate($form_id, $form_values) {
  if ($form_id == 'geshifilter_admin_general_settings') {
    // try to load GeSHi library from given dir
    $geshi_library_errmsg = _geshifilter_require_once_geshi_library(FALSE, $form_values['geshifilter_geshi_dir'], FALSE);
    if ($geshi_library_errmsg !== NULL) {
      form_set_error('geshifilter_geshi_dir', $geshi_library_errmsg);
    }
  }
}

/**
 * Menu callback for per language settings
 */
function geshifilter_admin_per_language_settings($view = 'enabled') {
  $form = array();
  // check GeSHi library
  $geshi_library_errmsg = _geshifilter_require_once_geshi_library();
  if ($geshi_library_errmsg !== NULL) {
    drupal_set_message($geshi_library_errmsg, 'error');
    return;
  }
  $add_checkbox = TRUE;
  $add_tag_option = (!geshifilter_use_format_specific_options());
  $form['language_settings'] = geshifilter_per_language_settings(NULL, $view, $add_checkbox, $add_tag_option);
  return system_settings_form($form);
}


/**
 * Menu callback for filter conflicts page
 */
function geshifilter_admin_filter_conflicts() {
  // start
  $output = '';
  // check GeSHi library
  $geshi_library_errmsg = _geshifilter_require_once_geshi_library();
  if ($geshi_library_errmsg !== NULL) {
    drupal_set_message($geshi_library_errmsg, 'error');
    return $output;
  }
  // some known filters that should come before GeSHi filter
  $conflicting_after_filters = array('filter/0', 'pearwiki_filter/0');
  foreach (filter_formats() as $format => $input_format) {
    // Get the filters in this input format
    $filters = filter_list_format($format);
    // look if GeSHi is enabled in this input format
    if (isset($filters['geshifilter/0'])) {
      $geshifilter = $filters['geshifilter/0'];
      $output .= '<h3>'. t('Input format !input_format', array('!input_format' => l(t($input_format->name), "/admin/settings/filters/$format"))) . '</h3>';
      $alerts = array();
      // Check if possibly conflicting filters are also present in input format
      foreach ($conflicting_after_filters as $key) {
        if (array_key_exists($key, $filters)) {
          $cfilter = $filters[$key];
          if ($cfilter->weight >= $geshifilter->weight) {
            $alerts[] = array(
              $cfilter->name,
              t('%geshifilter should come after %cfilter', array('%cfilter' => $cfilter->name, '%geshifilter' => $geshifilter->name)),
              l(t('Rearrange filters'), "/admin/settings/filters/$format/order", array(), drupal_get_destination()),
            );
          }
        }
      }
      // check HTML filter allowed tags
      if (isset($filters['filter/0'])) {
        $cfilter = $filters['filter/0'];
        $html_filter_allowed_tags = preg_split('/\s+|<|>/', variable_get("allowed_html_$format", '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>'), -1, PREG_SPLIT_NO_EMPTY);
        // collect geshifilter tags
        list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
        $geshifilter_tags = array_merge($generic_code_tags, $language_tags);
        foreach ($geshifilter_tags as $tag) {
          if (!in_array($tag, $html_filter_allowed_tags)) {
            $alerts[] = array(
              $cfilter->name,
              t('%cfilter will remove %tag tags', array('%cfilter' => $cfilter->name, '%tag' => "<$tag>")),
              t('Add tag %tag to !allowed_html_tags', array(
                '%tag' => "<$tag>",
                '!allowed_html_tags' => l(t('"%allowed_html_tags" of %cfilter', array(
                  '%allowed_html_tags' => t('Allowed HTML tags'),
                  '%cfilter' => $cfilter->name,
                  )), "/admin/settings/filters/$format/configure", array(), drupal_get_destination(), NULL, FALSE, TRUE)
              )),
            );
          }
        }
      }
      // show alerts
      if (count($alerts) == 0) {
        $alerts[] = array(array('data' => t('No known conflicts were detected.'), 'colspan' => 4));
      }
      $header = array(t('Filter'), t('Conflict description'), t('Possible solutions'));
      $output .= theme('table', $header, $alerts);
    }
  }
  return $output;
}

/**
 * Helper function for splitting a string on white spaces.
 * Using explode(' ', $string) is not enough because it returns empty elements
 * if $string contains consecutive spaces.
 */
function _geshifilter_whitespace_explode($string) {
  return preg_split('/\s+/', $string, -1, PREG_SPLIT_NO_EMPTY);
}

function _geshifilter_tag_split($string) {
  return preg_split('/\s+|<|>/', $string, -1, PREG_SPLIT_NO_EMPTY);
}


// General settings
function geshifilter_use_format_specific_options() {
  return variable_get('geshifilter_format_specific_options', FALSE);
}

function geshifilter_tags($format = 0) {
  if (!geshifilter_use_format_specific_options() || $format==0) {
    return variable_get('geshifilter_tags', '<code> <blockcode>');
  }
  return variable_get("geshifilter_tags_{$format}", geshifilter_tags());
}

function geshifilter_language_tags($language, $format = NULL) {
  if (!geshifilter_use_format_specific_options() || $format == NULL)
    return variable_get("geshifilter_language_tags_{$language}", '');
  return variable_get("geshifilter_language_tags_{$language}_{$format}", geshifilter_language_tags($language));
}

/**
 * List of available languages.
 */
function _geshifilter_get_available_languages() {
  $available_languages = array();
  $geshi_dirname = _geshifilter_get_geshi_dir();
  $geshi_library_errmsg = _geshifilter_require_once_geshi_library();
  if ($geshi_library_errmsg === NULL) {
    foreach (file_scan_directory($geshi_dirname .'/geshi/', '\.[pP][hH][pP]$') as $filename => $fileinfo) {
      $available_languages[$fileinfo->name] = $fileinfo->name;
    }
  }
  ksort($available_languages);
  return $available_languages;
}

/**
 * List of enabled languages.
 */
function _geshifilter_get_enabled_languages() {
  static $enabled_languages = NULL;
  if ($enabled_languages == NULL) {
    $enabled_languages = array();
    $languages = _geshifilter_get_available_languages();
    foreach ($languages as $key => $language) {
      if (variable_get("geshifilter_language_enabled_{$language}", TRUE)) {
        $enabled_languages[$key] = $language;
      }
    }
  }
  return $enabled_languages;
}

/**
 * Helper function for gettings the tags
 */
function _geshifilter_get_tags($format) {
  $generic_code_tags = _geshifilter_tag_split(geshifilter_tags($format));
  $language_tags = array();
  $tag_to_lang = array();
  $enabled_languages = _geshifilter_get_enabled_languages();
  foreach ($enabled_languages as $language) {
    $lang_tags = _geshifilter_tag_split(geshifilter_language_tags($language, $format));
    foreach ($lang_tags as $lang_tag) {
      $language_tags[] = $lang_tag;
      $tag_to_lang[$lang_tag] = $language;
    }
  }
  return array($generic_code_tags, $language_tags, $tag_to_lang);
}

/**
 * Callback for processing input text.
 */
function geshifilter_process($format, $text) {
  // load GeSHi library (if not already)
  $geshi_library_errmsg = _geshifilter_require_once_geshi_library();
  if ($geshi_library_errmsg !== NULL) {
    drupal_set_message($geshi_library_errmsg, 'error');
    return $text;
  }

  // get the available tags
  list($generic_code_tags, $language_tags, $tag_to_lang) = _geshifilter_get_tags($format);
  // get the available languages
  $enabled_languages = _geshifilter_get_enabled_languages();

  $tags = array_merge($generic_code_tags, $language_tags);
  $tags_string = implode('|', $tags);
  $lang_attributes = _geshifilter_whitespace_explode(GESHIFILTER_LANGUAGE_ATTRIBUTES);
  $linenumber_attributes = _geshifilter_whitespace_explode(GESHIFILTER_LINENUMBER_ATTRIBUTES);
  $attributes_string = implode('|', array_merge($lang_attributes, $linenumber_attributes));

  // todo: maybe change to preg_replace_callback, should be faster
  if (preg_match_all('#<('. $tags_string .')([^>]*)>(.*?)</\1\s*>#s', $text, $match_object)) {
    // $match_object[0][xx] .... fully matched string <tag type="language">...</tag>
    // $match_object[1][xx] .... tagname
    // $match_object[2][xx] .... full params string type="language"...
    // $match_object[3][xx] .... tag content
    foreach ($match_object[3] as $codeblock_index => $source_code) {
      // determine language by language tag or use default
      $lang = variable_get('geshifilter_default_language', GESHIFILTER_DEFAULT_PLAINTEXT);
      if (isset($tag_to_lang[$match_object[1][$codeblock_index]])) {
        $lang = $tag_to_lang[$match_object[1][$codeblock_index]];
      }
      // parse attributes (for language and line numbers)
      $linenumbers_start = NULL;
      preg_match_all('#('. $attributes_string .')="?([^\s"]*)"?#', $match_object[2][$codeblock_index], $param);
      // $param[0][xx] .... fully matched string type="language"
      // $param[1][xx] .... param name
      // $param[2][xx] .... param value
      foreach ($param[1] as $p_key => $p_name) {
        $p_value = $param[2][$p_key];
        if (in_array($p_name, $lang_attributes)) {
          if (in_array($p_value, $enabled_languages)) {
            $lang = $p_value;
          }
        }
        elseif (in_array($p_name, $linenumber_attributes)) {
          $linenumbers_start = (int)($p_value);
        }
      }

      // format as code block if there are newlines in the code
      $is_block = (strpos($source_code, "\n") !== FALSE);

      switch ($lang) {
        case GESHIFILTER_DEFAULT_DONOTHING:
          // do nothing, duh
          break;
        case GESHIFILTER_DEFAULT_PLAINTEXT:
          // use plain text 'highlighting'
          $lang = 'text';
        default:
          // decode html entities, GeSHi will reencode these
          $source_code = decode_entities($source_code);
          // remove newline (<br/>) and paragraph (<p>) formatting, GeSHi will add these again
          $source_code = preg_replace('@<p>|</p>|<br\s*/>@', "", $source_code);
          // remove leading/trailing newlines
          $source_code = trim($source_code, "\n\r");
          // do the highlighting
          $source_code = geshifilter_process_1_0_x($format, $source_code, $lang, $is_block, $linenumbers_start);
          // replace the original substring with the highlighted version
          $text = str_replace($match_object[0][$codeblock_index], $source_code, $text);
          break;
      }
    }
  }
  // return the filtered text
  return $text;
}

/**
 * Highlight using GeSHi 1.0.x
 */
function geshifilter_process_1_0_x($format, $text, $lang, $is_block = true, $linenumbers_start = NULL) {
  // create GeSHi object
  $geshi = new GeSHi($text, $lang);
  // CSS mode
  if (variable_get('geshifilter_css_mode', GESHIFILTER_CSS_INLINE) == GESHIFILTER_CSS_CLASSES) {
    $geshi->enable_classes(TRUE);
  }
  // override the some default GeSHi styles (e.g. GeSHi uses Courier by default, which is ugly)
  $geshi->set_code_style('font-family: monospace; font-weight: normal;');
  $geshi->set_line_style('font-family: monospace; font-weight: normal;');

  // setup geshi
  if ($is_block) {
    $geshi->set_header_type((int)variable_get('geshifilter_code_container', GESHI_HEADER_PRE));
    if ($linenumbers_start !== NULL) {
      $geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
      $geshi->start_line_numbers_at($linenumbers_start);
    }
    $geshi->set_overall_class('geshifilter '. $lang);
    return $geshi->parse_code();
  }
  else {
    $geshi->set_header_type(GESHI_HEADER_NONE);
    return '<code class="geshifilter '. $lang .'">'. $geshi->parse_code() .'</code>';
  }
}

/**
 * callback function for clearing the filter cache
 */
function geshifilter_clear_filter_cache() {
  cache_clear_all('*', 'cache_filter', TRUE);
  drupal_set_message('Filter cache cleared.');
  drupal_goto();
}
